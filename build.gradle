buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url= "https://nexus.gking2224.me/nexus/content/repositories/releases" }
        maven { url= "https://nexus.gking2224.me/nexus/content/repositories/snapshots" }
		maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "me.gking2224:BuildToolsGradlePlugin:0.3.0-SNAPSHOT"
        classpath group: "me.gking2224", name:"MicroServicesGradlePlugin", version:"0.0.+"
        //classpath "me.gking2224:AmazonAWSGradlePlugin:0.1.+"
        //classpath "me.gking2224:DockerPlugin:0.0.+"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}


apply plugin: 'me.gking2224.buildtools'
//apply plugin: 'me.gking2224.dockerplugin'
apply plugin: 'me.gking2224.awsplugin'
apply plugin: 'docker'

buildtools {
    eclipseDisabled()
}
applyBuildTools()
apply plugin: 'me.gking2224.msplugin'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    maven { url= "https://nexus.gking2224.me/nexus/content/repositories/releases" }
    maven { url= "https://nexus.gking2224.me/nexus/content/repositories/snapshots" }
}

dependencies {
    // BUILD
}

awsplugin {
    region = "eu-west-1"
}

/*
project.task("ecrGetLogin", type: me.gking2224.awsplugin.task.ecr.GetLogin) {
    registryId = project.dockerEcrRegistryId
}


project.tasks.ecrGetLogin << {
    println ecrUsername
    println ecrPassword
    project.dockerplugin {
        registryUsername = project.ecrUsername
        registryPassword = project.ecrPassword
        registryUrl = project.ecrRepository
    }
}

task("dockerLogin", type: me.gking2224.dockerplugin.task.DockerLogin)
dockerLogin.dependsOn 'ecrGetLogin'

project.task("buildDockerImage", type: se.transmode.gradle.plugins.docker.DockerTask) {
    dockerfile = new File('Dockerfile')
    applicationName = project.name
    tag = "${project.group}/${project.name}"
    tagVersion = project.version
    apiEmail = "none"
}
buildDockerImage.doFirst {
    tagVersion = project.version
    setEnvironment "VERSION", project.version
    hostUrl = project.ecrRepository
    apiUsername = project.ecrUsername
    apiPassword = project.ecrPassword
}
buildDockerImage.dependsOn 'dockerLogin'
*/
